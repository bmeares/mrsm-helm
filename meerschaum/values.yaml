image:
  registry: bmeares
  repository: meerschaum
  tag: "2.1.6"
  pullPolicy: IfNotPresent

meerschaum:
  args: ["start", "api", "--production", "--port", "8000"]
  config:
    meerschaum:
      instance: "sql:prod"
      api_instance: "sql:prod"
      connectors:
        sql:
          prod:
            uri: 'sqlite:////meerschaum/sqlite/prod.db'
  path: /
  healthcheckPath: /healthcheck


## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## meerschaum data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: "3Gi"

  ## A manually managed Persistent Volume Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  ##
  # existingClaim:

  ## If defined, the meerschaum-data volume will mount to the specified path.
  ## Requires persistence.enabled: true
  ## Requires persistence.existingClaim: nil|false
  ## Default: nil.
  ##
  path: /meerschaum

  dataSource:
    enabled: false
    # name:

ingress:
  enabled: true
  className: "nginx"
  annotations:
    # kubernetes.io/ingress.class: "nginx"
    # cert-manager.io/issuer: "letsencrypt-production"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  path: /
  hosts:
    ### NOTE: This will need to be updated to your host.
    - localhost
  # tls: []

podAnnotations: {}

service:
  type: ClusterIP
  port: 8000
  targetPort: 8000

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 6
  successThreshold: 1

replicaCount: 1

## Update strategy - only really applicable for deployments with RWO PVs attached
## If replicas = 1, an update can get "stuck", as the previous pod remains attached to the
## PV, and the "incoming" pod can never start. Changing the strategy to "Recreate" will
## terminate the single previous pod, so that the new, incoming pod can attach to the PV
##
updateStrategy:
  type: RollingUpdate
